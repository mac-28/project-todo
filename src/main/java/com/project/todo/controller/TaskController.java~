package com.project.todo.controller;

import com.project.todo.constants.TaskConstants;
import com.project.todo.dto.ErrorResponseDto;
import com.project.todo.dto.ResponseDto;
import com.project.todo.dto.TaskDto;
import com.project.todo.entity.Task;
import com.project.todo.service.Impl.ITasksServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/tasks")
@AllArgsConstructor
public class TaskController {

    private ITasksServiceImpl tasksService;

    @Operation(
            summary = "Create Task REST API",
            description = "REST API to create a new Task"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "201",
                    description = "HTTP Status 201 - Created"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status 500 - Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @PostMapping(value = "/create")
    public ResponseEntity<ResponseDto> fetchTasks(@Valid @RequestBody TaskDto taskDto) {
        tasksService.createTask(taskDto);
        return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDto(TaskConstants.STATUS_201, TaskConstants.MESSAGE_201));
    }

    @Operation(
            summary = "Fetch All Task Details REST API",
            description = "REST API to fetch All Task details"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status - OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status 500 - Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @GetMapping("/tasks")
    public ResponseEntity<List<Task>> fetchTasks() {
        return ResponseEntity.status(HttpStatus.OK).body(tasksService.fetchTasks());
    }

    @Operation(
            summary = "Fetch Task Details REST API",
            description = "REST API to fetch Task details"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status - OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status 500 - Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @GetMapping("/task")
    public ResponseEntity<Task> fetchTask(@RequestParam("taskId") Long taskId) {
        return ResponseEntity.status(HttpStatus.OK).body(tasksService.fetchTask(taskId));
    }

    @Operation(
            summary = "Update Task Details REST API",
            description = "REST API to update Task details"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status - OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status 500 - Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @PutMapping("/update")
    public ResponseEntity<ResponseDto> updateTask(@RequestParam("taskId") Long taskId, @Valid @RequestBody TaskDto taskDto) {
        tasksService.updateTask(taskId,taskDto);
        return ResponseEntity.status(HttpStatus.OK).body(new ResponseDto(TaskConstants.STATUS_200, TaskConstants.MESSAGE_200));
    }

    @Operation(
            summary = "Delete Task REST API",
            description = "REST API to delete Task"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status - OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status 500 - Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @DeleteMapping("/delete")
    public ResponseEntity<ResponseDto> deleteTask(@RequestParam("taskId") Long taskId) {
        tasksService.deleteTask(taskId);
        return ResponseEntity.status(HttpStatus.OK).body(new ResponseDto(TaskConstants.STATUS_200, TaskConstants.MESSAGE_200));
    }

}
